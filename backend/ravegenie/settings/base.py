"""
Django settings for ContentAndSocialMediaSystem project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
from dotenv import load_dotenv
from celery.schedules import crontab
import re


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Load .env file and populate os.getenv
env_file = os.path.join(BASE_DIR, '.env')
load_dotenv(env_file)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

APPEND_SLASH = True

AUTH_USER_MODEL = "ravegenieApp.User"

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'AccountsApp.apps.AccountsappConfig',
    'ravegenieApp.apps.RavegenieappConfig',
    'utils',
    'rest_framework',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ravegenie.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ravegenie.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

ITEMS_PER_PAGE = 20

STATIC_PATH = os.path.join(BASE_DIR, 'static')
MEDIA_PATH = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'
STATIC_URL = '/static/'

ACCOUNTS_APP = {
    "base_url": "accounts/",         # Base url pattern for the AccountsApp urls
    "redirect_link": '',    # Link redirected to after link verification 
    "code_length": 10,       # specifies the length of the verification code
    "sign_in_after_verification": True     # Specify if to sign in after verification is successful
}

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'ravegenie.exception_filters.custom_exception_handler'
}

CAMPAIGN_RENEW_DISCOUNT_PERCENT = 20
PROMOTER_COMPENSATION_NGN = 20

SDR = os.getenv("SDR")
assert SDR is not None, "SDR must be set"
SDR = int(SDR)
SPR = os.getenv("SPR")
assert SPR is not None, "SPR must be set"
SPR = int(SPR)

TO_DOLLAR = lambda x: x/SDR
TO_NAIRA = lambda x: x * SDR

CAMPAIGN_DAILY_PRICE = TO_DOLLAR(40)

FLUTTER_SIGNATURE = os.getenv('FLUTTER_SIGNATURE')
FL_PUB_KEY = os.getenv('FL_PUB_KEY')
FL_SECRET_KEY = os.getenv('FL_SECRET_KEY')
FL_REDIRECT_URL = os.getenv("FL_REDIRECT_URL")
FL_INIT_URL = os.getenv("FL_INIT_URL")
FL_VERIFICATION_URL = os.getenv("FL_VERIFICATION_URL")
CURRENCY = "NGN"

BUSINESS_REF_BONUS=5
EXCLUSIVE_REF_BONUS=16
EXCLUSIVE_COST=TO_DOLLAR(12820)
PUBLISHER_REF_BONUS=5
CAMPAIGNS_PER_EXCLUSIVE_SUB = 5

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_BEAT_SCHEDULE = {
    'check-promotion-actions': {
        'task': 'ravegenieApp.tasks.complete_promotions_actions',
        'schedule': crontab(minute=0, hour='*/3'),
    },
    'task-supervisor': {
        'task': 'ravegenieApp.tasks.supervise_tasks',
        'schedule': crontab(minute=0, hour=0)
    },
    'promotion-supervisor': {
        'task': 'ravegenieApp.tasks.supervise_promotions',
        'schedule': crontab(minute=0, hour=0)
    },
    'supervise-campaigns': {
        'task': 'ravegenieApp.tasks.supervise_campaigns',
        'schedule': crontab(minute=0, hour=0)
    }
    
}

SERVICE_CONTAINER = ""